/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
 * All rights reserved.</center></h2>
 *
 * This software component is licensed by ST under BSD 3-Clause license,
 * the "License"; You may not use this file except in compliance with the
 * License. You may obtain a copy of the License at:
 *                        opensource.org/licenses/BSD-3-Clause
 *
 ******************************************************************************
 */

#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

#include <stdint.h>

/* Output HSI clock to the MCU pin */
/* This can be done my activating the MCOx and map it to a GPIO pin */
/* Map MCO1 to GPIO port A pin 8 */

#define RCC_BASE_ADDR			(0x40023800UL)
#define RCC_CFGR_OFFSET			(0x08UL)
#define RCC_CFGR				(RCC_BASE_ADDR + RCC_CFGR_OFFSET)
#define RCC_AHB1ENR_OFFSET		(0x30UL)
#define RCC_AHB1ENR				(RCC_BASE_ADDR + RCC_AHB1ENR_OFFSET)

#define GPIOA_BASE_ADDR 		(0x40020000)
#define GPIOx_MODER_OFFSET		(0x00)
#define GPIOA_MODER				(GPIOA_BASE_ADDR + GPIOx_MODER_OFFSET)

int main(void)
{
	uint32_t *pRCC_CFGR = (uint32_t*)(RCC_CFGR);
	uint32_t *pRCC_AHB1ENR = (uint32_t*)(RCC_AHB1ENR);
	uint32_t *pGPIOA_MODER = (uint32_t*)(GPIOA_MODER);

	/* Enable GPIOA */
	*pRCC_AHB1ENR |= (1 << 0);

	/* Set mode for GPIOA as Alternate Function Mode */


	/* Select HSI as source for MCO1 */
	*pRCC_CFGR &= (0x03 << 21);
	for(;;);
}
